permissions:
  contents: read # required to checkout the code from the repo
  packages: write # required for push to GHCR
name: Test, Build and Push
# Only run one instance at a time for a given branch
concurrency: ci-${{ github.ref }}
on:
  push:
  workflow_dispatch:
jobs:
  test:
    name: Test
    runs-on: ubuntu-latest
    timeout-minutes: 10
    steps:
      - uses: actions/checkout@v5
      - uses: snok/install-poetry@v1
        with:
          virtualenvs-create: true
      - uses: actions/setup-python@v6
        with:
          python-version: "3.12"
          cache: "poetry"
      # Install dependencies. `--no-root` means "install all dependencies but not the project
      # itself
      - run: poetry install --no-interaction --no-root
      # Install
      - run: poetry install --no-interaction
      # Lint check
      - run: poetry run ruff check kollie tests
      # Type check
      - run: poetry run mypy .
      # Test
      - run: poetry run pytest
        env:
          APPLICATION_STAGE: test
          KOLLIE_COMMON_SUBSTITUTIONS_JSON_PATH: tests/test_common_substitutions.json
          KOLLIE_DEFAULT_FLUX_REPOSITORY: test-repo
  build:
    name: Build and Push
    runs-on: ubuntu-latest
    needs: [test]
    timeout-minutes: 15
    steps:
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Login to ghcr.io
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Extract Docker metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ghcr.io/${{ github.repository }}
          flavor: |
            latest=false
          tags: |
            type=sha,format=long,prefix={{branch}}-,suffix=-{{date 'X'}},priority=1500,enable=${{ github.ref_type == 'branch' }}
            type=sha,format=long,prefix=
            type=ref,event=branch
            type=ref,event=tag
      - name: Build and push Docker image
        uses: docker/build-push-action@v6
        with:
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          target: deploy
          platforms: |
            linux/amd64
            linux/arm64
          push: true
